// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tutorials.Data.Context;

#nullable disable

namespace Tutorials.Data.Migrations
{
    [DbContext(typeof(TutorialDbContext))]
    partial class TutorialDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RoomStudent", b =>
                {
                    b.Property<int>("RoomsId")
                        .HasColumnType("int");

                    b.Property<int>("studentsId")
                        .HasColumnType("int");

                    b.HasKey("RoomsId", "studentsId");

                    b.HasIndex("studentsId");

                    b.ToTable("RoomStudent");
                });

            modelBuilder.Entity("Tutorials.Data.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Tutorials.Data.Entities.Center", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Centers");
                });

            modelBuilder.Entity("Tutorials.Data.Entities.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId")
                        .IsUnique();

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("Tutorials.Data.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentStudentNumber")
                        .HasColumnType("int");

                    b.Property<int>("DayOfWeeks")
                        .HasColumnType("int");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("SizeRoom")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeRoom")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Tutorials.Data.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Tutorials.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Tutorials.Data.Entities.Secretary", b =>
                {
                    b.HasBaseType("Tutorials.Data.Entities.User");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasIndex("TeacherId");

                    b.HasDiscriminator().HasValue("Secretary");
                });

            modelBuilder.Entity("Tutorials.Data.Entities.Student", b =>
                {
                    b.HasBaseType("Tutorials.Data.Entities.User");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("LevelId")
                        .HasColumnType("int");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.HasIndex("LevelId");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Tutorials.Data.Entities.Teacher", b =>
                {
                    b.HasBaseType("Tutorials.Data.Entities.User");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("RoomStudent", b =>
                {
                    b.HasOne("Tutorials.Data.Entities.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tutorials.Data.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("studentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tutorials.Data.Entities.Center", b =>
                {
                    b.HasOne("Tutorials.Data.Entities.Address", "Address")
                        .WithOne("Center")
                        .HasForeignKey("Tutorials.Data.Entities.Center", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Tutorials.Data.Entities.Level", b =>
                {
                    b.HasOne("Tutorials.Data.Entities.Subject", "Subject")
                        .WithOne("Level")
                        .HasForeignKey("Tutorials.Data.Entities.Level", "SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Tutorials.Data.Entities.Room", b =>
                {
                    b.HasOne("Tutorials.Data.Entities.Center", "Center")
                        .WithMany("Rooms")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tutorials.Data.Entities.Subject", "Subject")
                        .WithMany("Rooms")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tutorials.Data.Entities.Teacher", "Teacher")
                        .WithMany("Rooms")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Tutorials.Data.Entities.Secretary", b =>
                {
                    b.HasOne("Tutorials.Data.Entities.Teacher", "Teacher")
                        .WithMany("Secretary")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Tutorials.Data.Entities.Student", b =>
                {
                    b.HasOne("Tutorials.Data.Entities.Address", "Address")
                        .WithOne("Student")
                        .HasForeignKey("Tutorials.Data.Entities.Student", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tutorials.Data.Entities.Level", null)
                        .WithMany("Students")
                        .HasForeignKey("LevelId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Tutorials.Data.Entities.Address", b =>
                {
                    b.Navigation("Center")
                        .IsRequired();

                    b.Navigation("Student")
                        .IsRequired();
                });

            modelBuilder.Entity("Tutorials.Data.Entities.Center", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Tutorials.Data.Entities.Level", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Tutorials.Data.Entities.Subject", b =>
                {
                    b.Navigation("Level")
                        .IsRequired();

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Tutorials.Data.Entities.Teacher", b =>
                {
                    b.Navigation("Rooms");

                    b.Navigation("Secretary");
                });
#pragma warning restore 612, 618
        }
    }
}
